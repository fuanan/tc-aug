# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import builtins as module_0
import program_under_test as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    object_0 = module_0.object()
    set_0 = {object_0}
    solution_0 = module_1.Solution()
    solution_0.search(set_0, object_0)


def test_case_1():
    list_0 = []
    solution_0 = module_1.Solution()
    int_0 = solution_0.search(list_0, list_0)
    assert int_0 == -1


def test_case_2():
    solution_0 = module_1.Solution()


def test_case_3():
    int_0 = -835
    int_1 = 971
    list_0 = [int_0, int_0, int_0, int_1]
    solution_0 = module_1.Solution()
    int_2 = solution_0.search(list_0, int_1)
    assert int_2 == 3


def test_case_4():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    int_0 = -3207
    solution_0 = module_1.Solution()
    int_1 = solution_0.search(dict_0, int_0)
    assert int_1 == -1


def test_case_5():
    bool_0 = False
    int_0 = -835
    int_1 = 971
    list_0 = [bool_0, bool_0, int_0, int_1]
    solution_0 = module_1.Solution()
    int_2 = solution_0.search(list_0, int_1)
    assert int_2 == 3


def test_case_6():
    solution_0 = module_1.Solution()
    bool_0 = False
    int_0 = 2358
    int_1 = -1469
    int_2 = -1887
    bool_1 = False
    list_0 = [int_0, bool_1]
    int_3 = -2712
    int_4 = solution_0.search(list_0, int_3)
    assert int_4 == -1
    list_1 = [bool_0, int_0, int_1, int_2]
    int_5 = solution_0.search(list_1, int_2)
    assert int_5 == -1


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = False
    bool_1 = False
    list_0 = []
    solution_0 = module_1.Solution(*list_0)
    bool_2 = False
    list_1 = [bool_0, bool_1, bool_2, bool_1]
    solution_1 = module_1.Solution()
    solution_2 = module_1.Solution()
    list_2 = []
    int_0 = solution_2.search(list_2, list_1)
    assert int_0 == -1
    int_1 = solution_2.search(list_1, bool_1)
    assert int_1 == 1
    int_2 = -212
    solution_3 = module_1.Solution()
    int_3 = solution_3.search(list_1, bool_1)
    assert int_3 == 1
    list_3 = [int_2]
    bool_3 = True
    int_4 = solution_3.search(list_3, bool_3)
    assert int_4 == -1
    bool_4 = False
    list_4 = [bool_4, int_2, int_1]
    int_5 = solution_3.search(list_4, bool_4)
    assert int_5 == -1
    solution_3.search(int_0, int_5)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = False
    list_0 = []
    solution_0 = module_1.Solution(*list_0)
    solution_1 = module_1.Solution()
    list_1 = []
    int_0 = solution_1.search(list_1, list_0)
    assert int_0 == -1
    int_1 = solution_1.search(list_0, bool_0)
    assert int_1 == -1
    int_2 = -212
    solution_2 = module_1.Solution()
    int_3 = solution_2.search(list_0, bool_0)
    assert int_3 == -1
    list_2 = [int_2]
    bool_1 = True
    int_4 = solution_2.search(list_2, bool_1)
    assert int_4 == -1
    bool_2 = False
    list_3 = [bool_2, int_2, int_1]
    int_5 = solution_2.search(list_3, bool_2)
    assert int_5 == 0
    solution_2.search(int_0, int_5)
