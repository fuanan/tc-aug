# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import program_under_test as module_0


def test_case_0():
    int_0 = -415
    list_0 = [int_0]
    solution_0 = module_0.Solution()
    int_1 = solution_0.search(list_0, int_0)
    assert int_1 == 0


def test_case_3():
    bool_0 = False
    int_0 = -2535
    int_1 = -1693
    list_0 = [bool_0, int_0, int_1]
    solution_0 = module_0.Solution()
    int_2 = solution_0.search(list_0, int_1)
    assert int_2 == 2


def test_case_4():
    bool_0 = False
    int_0 = 473
    list_0 = [bool_0, int_0, int_0]
    int_1 = 2074
    solution_0 = module_0.Solution()
    int_2 = solution_0.search(list_0, int_1)
    assert int_2 == -1


def test_case_5():
    bool_0 = False
    solution_0 = module_0.Solution()
    int_0 = solution_0.search(bool_0, bool_0)
    assert int_0 == -1
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    bool_1 = False
    bool_2 = False
    solution_1 = module_0.Solution()
    solution_2 = module_0.Solution()
    bool_3 = True
    list_0 = [bool_1, bool_2, bool_3, bool_2]
    solution_3 = module_0.Solution()
    int_1 = solution_0.search(list_0, int_0)
    assert int_1 == -1
    bool_4 = True
    int_2 = solution_0.search(list_0, bool_4)
    assert int_2 == 2
    solution_4 = module_0.Solution()
    int_3 = solution_4.search(bool_0, set_0)
    assert int_3 == -1
    solution_5 = module_0.Solution()


test_case_0()
test_case_3()
test_case_5()
